# source: http://localhost:4467
# timestamp: Sun Oct 21 2018 15:35:40 GMT-0400 (Eastern Daylight Time)

type Accredidation implements Node {
  id: ID!
  accredsName: String!
  accredsDesc: String!
  accredsType: String!
  dateReceived: String!
  accreditorOrg(where: OrganizationWhereInput): Organization!
}

"""A connection to a list of items."""
type AccredidationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccredidationEdge]!
  aggregate: AggregateAccredidation!
}

input AccredidationCreateInput {
  accredsName: String!
  accredsDesc: String!
  accredsType: String!
  dateReceived: String!
  accreditorOrg: OrganizationCreateOneInput!
}

input AccredidationCreateManyInput {
  create: [AccredidationCreateInput!]
  connect: [AccredidationWhereUniqueInput!]
}

"""An edge in a connection."""
type AccredidationEdge {
  """The item at the end of the edge."""
  node: Accredidation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccredidationOrderByInput {
  id_ASC
  id_DESC
  accredsName_ASC
  accredsName_DESC
  accredsDesc_ASC
  accredsDesc_DESC
  accredsType_ASC
  accredsType_DESC
  dateReceived_ASC
  dateReceived_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AccredidationPreviousValues {
  id: ID!
  accredsName: String!
  accredsDesc: String!
  accredsType: String!
  dateReceived: String!
}

type AccredidationSubscriptionPayload {
  mutation: MutationType!
  node: Accredidation
  updatedFields: [String!]
  previousValues: AccredidationPreviousValues
}

input AccredidationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccredidationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccredidationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccredidationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccredidationWhereInput
}

input AccredidationUpdateDataInput {
  accredsName: String
  accredsDesc: String
  accredsType: String
  dateReceived: String
  accreditorOrg: OrganizationUpdateOneInput
}

input AccredidationUpdateInput {
  accredsName: String
  accredsDesc: String
  accredsType: String
  dateReceived: String
  accreditorOrg: OrganizationUpdateOneInput
}

input AccredidationUpdateManyInput {
  create: [AccredidationCreateInput!]
  connect: [AccredidationWhereUniqueInput!]
  disconnect: [AccredidationWhereUniqueInput!]
  delete: [AccredidationWhereUniqueInput!]
  update: [AccredidationUpdateWithWhereUniqueNestedInput!]
  upsert: [AccredidationUpsertWithWhereUniqueNestedInput!]
}

input AccredidationUpdateWithWhereUniqueNestedInput {
  where: AccredidationWhereUniqueInput!
  data: AccredidationUpdateDataInput!
}

input AccredidationUpsertWithWhereUniqueNestedInput {
  where: AccredidationWhereUniqueInput!
  update: AccredidationUpdateDataInput!
  create: AccredidationCreateInput!
}

input AccredidationWhereInput {
  """Logical AND on all given filters."""
  AND: [AccredidationWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccredidationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccredidationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  accredsName: String

  """All values that are not equal to given value."""
  accredsName_not: String

  """All values that are contained in given list."""
  accredsName_in: [String!]

  """All values that are not contained in given list."""
  accredsName_not_in: [String!]

  """All values less than the given value."""
  accredsName_lt: String

  """All values less than or equal the given value."""
  accredsName_lte: String

  """All values greater than the given value."""
  accredsName_gt: String

  """All values greater than or equal the given value."""
  accredsName_gte: String

  """All values containing the given string."""
  accredsName_contains: String

  """All values not containing the given string."""
  accredsName_not_contains: String

  """All values starting with the given string."""
  accredsName_starts_with: String

  """All values not starting with the given string."""
  accredsName_not_starts_with: String

  """All values ending with the given string."""
  accredsName_ends_with: String

  """All values not ending with the given string."""
  accredsName_not_ends_with: String
  accredsDesc: String

  """All values that are not equal to given value."""
  accredsDesc_not: String

  """All values that are contained in given list."""
  accredsDesc_in: [String!]

  """All values that are not contained in given list."""
  accredsDesc_not_in: [String!]

  """All values less than the given value."""
  accredsDesc_lt: String

  """All values less than or equal the given value."""
  accredsDesc_lte: String

  """All values greater than the given value."""
  accredsDesc_gt: String

  """All values greater than or equal the given value."""
  accredsDesc_gte: String

  """All values containing the given string."""
  accredsDesc_contains: String

  """All values not containing the given string."""
  accredsDesc_not_contains: String

  """All values starting with the given string."""
  accredsDesc_starts_with: String

  """All values not starting with the given string."""
  accredsDesc_not_starts_with: String

  """All values ending with the given string."""
  accredsDesc_ends_with: String

  """All values not ending with the given string."""
  accredsDesc_not_ends_with: String
  accredsType: String

  """All values that are not equal to given value."""
  accredsType_not: String

  """All values that are contained in given list."""
  accredsType_in: [String!]

  """All values that are not contained in given list."""
  accredsType_not_in: [String!]

  """All values less than the given value."""
  accredsType_lt: String

  """All values less than or equal the given value."""
  accredsType_lte: String

  """All values greater than the given value."""
  accredsType_gt: String

  """All values greater than or equal the given value."""
  accredsType_gte: String

  """All values containing the given string."""
  accredsType_contains: String

  """All values not containing the given string."""
  accredsType_not_contains: String

  """All values starting with the given string."""
  accredsType_starts_with: String

  """All values not starting with the given string."""
  accredsType_not_starts_with: String

  """All values ending with the given string."""
  accredsType_ends_with: String

  """All values not ending with the given string."""
  accredsType_not_ends_with: String
  dateReceived: String

  """All values that are not equal to given value."""
  dateReceived_not: String

  """All values that are contained in given list."""
  dateReceived_in: [String!]

  """All values that are not contained in given list."""
  dateReceived_not_in: [String!]

  """All values less than the given value."""
  dateReceived_lt: String

  """All values less than or equal the given value."""
  dateReceived_lte: String

  """All values greater than the given value."""
  dateReceived_gt: String

  """All values greater than or equal the given value."""
  dateReceived_gte: String

  """All values containing the given string."""
  dateReceived_contains: String

  """All values not containing the given string."""
  dateReceived_not_contains: String

  """All values starting with the given string."""
  dateReceived_starts_with: String

  """All values not starting with the given string."""
  dateReceived_not_starts_with: String

  """All values ending with the given string."""
  dateReceived_ends_with: String

  """All values not ending with the given string."""
  dateReceived_not_ends_with: String
  accreditorOrg: OrganizationWhereInput
}

input AccredidationWhereUniqueInput {
  id: ID
}

type AggregateAccredidation {
  count: Int!
}

type AggregateLikes {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Likes implements Node {
  id: ID!
  guid: String
}

"""A connection to a list of items."""
type LikesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LikesEdge]!
  aggregate: AggregateLikes!
}

input LikesCreateInput {
  guid: String
}

input LikesCreateManyInput {
  create: [LikesCreateInput!]
  connect: [LikesWhereUniqueInput!]
}

"""An edge in a connection."""
type LikesEdge {
  """The item at the end of the edge."""
  node: Likes!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LikesOrderByInput {
  id_ASC
  id_DESC
  guid_ASC
  guid_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LikesPreviousValues {
  id: ID!
  guid: String
}

type LikesSubscriptionPayload {
  mutation: MutationType!
  node: Likes
  updatedFields: [String!]
  previousValues: LikesPreviousValues
}

input LikesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LikesWhereInput
}

input LikesUpdateDataInput {
  guid: String
}

input LikesUpdateInput {
  guid: String
}

input LikesUpdateManyInput {
  create: [LikesCreateInput!]
  connect: [LikesWhereUniqueInput!]
  disconnect: [LikesWhereUniqueInput!]
  delete: [LikesWhereUniqueInput!]
  update: [LikesUpdateWithWhereUniqueNestedInput!]
  upsert: [LikesUpsertWithWhereUniqueNestedInput!]
}

input LikesUpdateWithWhereUniqueNestedInput {
  where: LikesWhereUniqueInput!
  data: LikesUpdateDataInput!
}

input LikesUpsertWithWhereUniqueNestedInput {
  where: LikesWhereUniqueInput!
  update: LikesUpdateDataInput!
  create: LikesCreateInput!
}

input LikesWhereInput {
  """Logical AND on all given filters."""
  AND: [LikesWhereInput!]

  """Logical OR on all given filters."""
  OR: [LikesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LikesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  guid: String

  """All values that are not equal to given value."""
  guid_not: String

  """All values that are contained in given list."""
  guid_in: [String!]

  """All values that are not contained in given list."""
  guid_not_in: [String!]

  """All values less than the given value."""
  guid_lt: String

  """All values less than or equal the given value."""
  guid_lte: String

  """All values greater than the given value."""
  guid_gt: String

  """All values greater than or equal the given value."""
  guid_gte: String

  """All values containing the given string."""
  guid_contains: String

  """All values not containing the given string."""
  guid_not_contains: String

  """All values starting with the given string."""
  guid_starts_with: String

  """All values not starting with the given string."""
  guid_not_starts_with: String

  """All values ending with the given string."""
  guid_ends_with: String

  """All values not ending with the given string."""
  guid_not_ends_with: String
}

input LikesWhereUniqueInput {
  id: ID
  guid: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProfile(data: ProfileCreateInput!): Profile!
  createAccredidation(data: AccredidationCreateInput!): Accredidation!
  createLikes(data: LikesCreateInput!): Likes!
  createOrganization(data: OrganizationCreateInput!): Organization!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateAccredidation(data: AccredidationUpdateInput!, where: AccredidationWhereUniqueInput!): Accredidation
  updateLikes(data: LikesUpdateInput!, where: LikesWhereUniqueInput!): Likes
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteAccredidation(where: AccredidationWhereUniqueInput!): Accredidation
  deleteLikes(where: LikesWhereUniqueInput!): Likes
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  upsertAccredidation(where: AccredidationWhereUniqueInput!, create: AccredidationCreateInput!, update: AccredidationUpdateInput!): Accredidation!
  upsertLikes(where: LikesWhereUniqueInput!, create: LikesCreateInput!, update: LikesUpdateInput!): Likes!
  upsertOrganization(where: OrganizationWhereUniqueInput!, create: OrganizationCreateInput!, update: OrganizationUpdateInput!): Organization!
  updateManyProfiles(data: ProfileUpdateInput!, where: ProfileWhereInput): BatchPayload!
  updateManyAccredidations(data: AccredidationUpdateInput!, where: AccredidationWhereInput): BatchPayload!
  updateManyLikeses(data: LikesUpdateInput!, where: LikesWhereInput): BatchPayload!
  updateManyOrganizations(data: OrganizationUpdateInput!, where: OrganizationWhereInput): BatchPayload!
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  deleteManyAccredidations(where: AccredidationWhereInput): BatchPayload!
  deleteManyLikeses(where: LikesWhereInput): BatchPayload!
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Organization implements Node {
  id: ID!
  orgName: String!
  address: String!
  country: String!
  orgType: String!
}

"""A connection to a list of items."""
type OrganizationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OrganizationEdge]!
  aggregate: AggregateOrganization!
}

input OrganizationCreateInput {
  orgName: String!
  address: String!
  country: String!
  orgType: String!
}

input OrganizationCreateOneInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

"""An edge in a connection."""
type OrganizationEdge {
  """The item at the end of the edge."""
  node: Organization!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OrganizationOrderByInput {
  id_ASC
  id_DESC
  orgName_ASC
  orgName_DESC
  address_ASC
  address_DESC
  country_ASC
  country_DESC
  orgType_ASC
  orgType_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OrganizationPreviousValues {
  id: ID!
  orgName: String!
  address: String!
  country: String!
  orgType: String!
}

type OrganizationSubscriptionPayload {
  mutation: MutationType!
  node: Organization
  updatedFields: [String!]
  previousValues: OrganizationPreviousValues
}

input OrganizationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OrganizationWhereInput
}

input OrganizationUpdateDataInput {
  orgName: String
  address: String
  country: String
  orgType: String
}

input OrganizationUpdateInput {
  orgName: String
  address: String
  country: String
  orgType: String
}

input OrganizationUpdateOneInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OrganizationUpdateDataInput
  upsert: OrganizationUpsertNestedInput
}

input OrganizationUpsertNestedInput {
  update: OrganizationUpdateDataInput!
  create: OrganizationCreateInput!
}

input OrganizationWhereInput {
  """Logical AND on all given filters."""
  AND: [OrganizationWhereInput!]

  """Logical OR on all given filters."""
  OR: [OrganizationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OrganizationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  orgName: String

  """All values that are not equal to given value."""
  orgName_not: String

  """All values that are contained in given list."""
  orgName_in: [String!]

  """All values that are not contained in given list."""
  orgName_not_in: [String!]

  """All values less than the given value."""
  orgName_lt: String

  """All values less than or equal the given value."""
  orgName_lte: String

  """All values greater than the given value."""
  orgName_gt: String

  """All values greater than or equal the given value."""
  orgName_gte: String

  """All values containing the given string."""
  orgName_contains: String

  """All values not containing the given string."""
  orgName_not_contains: String

  """All values starting with the given string."""
  orgName_starts_with: String

  """All values not starting with the given string."""
  orgName_not_starts_with: String

  """All values ending with the given string."""
  orgName_ends_with: String

  """All values not ending with the given string."""
  orgName_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  orgType: String

  """All values that are not equal to given value."""
  orgType_not: String

  """All values that are contained in given list."""
  orgType_in: [String!]

  """All values that are not contained in given list."""
  orgType_not_in: [String!]

  """All values less than the given value."""
  orgType_lt: String

  """All values less than or equal the given value."""
  orgType_lte: String

  """All values greater than the given value."""
  orgType_gt: String

  """All values greater than or equal the given value."""
  orgType_gte: String

  """All values containing the given string."""
  orgType_contains: String

  """All values not containing the given string."""
  orgType_not_contains: String

  """All values starting with the given string."""
  orgType_starts_with: String

  """All values not starting with the given string."""
  orgType_not_starts_with: String

  """All values ending with the given string."""
  orgType_ends_with: String

  """All values not ending with the given string."""
  orgType_not_ends_with: String
}

input OrganizationWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Profile implements Node {
  id: ID!
  account_id: ID
  userName: String
  firstName: String
  lastName: String
  dateOfBirth: String
  storiesPublished: Int
  storiesReviewed: Int
  flaggedStories: Int
  occupation: String
  employer(where: OrganizationWhereInput): Organization
  accredidations(where: AccredidationWhereInput, orderBy: AccredidationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Accredidation!]
  storiesLiked(where: LikesWhereInput, orderBy: LikesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Likes!]
  stories: [ID!]!
}

"""A connection to a list of items."""
type ProfileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  account_id: ID
  userName: String
  firstName: String
  lastName: String
  dateOfBirth: String
  storiesPublished: Int
  storiesReviewed: Int
  flaggedStories: Int
  occupation: String
  stories: ProfileCreatestoriesInput
  employer: OrganizationCreateOneInput
  accredidations: AccredidationCreateManyInput
  storiesLiked: LikesCreateManyInput
}

input ProfileCreatestoriesInput {
  set: [ID!]
}

"""An edge in a connection."""
type ProfileEdge {
  """The item at the end of the edge."""
  node: Profile!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  account_id_ASC
  account_id_DESC
  userName_ASC
  userName_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  dateOfBirth_ASC
  dateOfBirth_DESC
  storiesPublished_ASC
  storiesPublished_DESC
  storiesReviewed_ASC
  storiesReviewed_DESC
  flaggedStories_ASC
  flaggedStories_DESC
  occupation_ASC
  occupation_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProfilePreviousValues {
  id: ID!
  account_id: ID
  userName: String
  firstName: String
  lastName: String
  dateOfBirth: String
  storiesPublished: Int
  storiesReviewed: Int
  flaggedStories: Int
  occupation: String
  stories: [ID!]!
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
}

input ProfileUpdateInput {
  account_id: ID
  userName: String
  firstName: String
  lastName: String
  dateOfBirth: String
  storiesPublished: Int
  storiesReviewed: Int
  flaggedStories: Int
  occupation: String
  stories: ProfileUpdatestoriesInput
  employer: OrganizationUpdateOneInput
  accredidations: AccredidationUpdateManyInput
  storiesLiked: LikesUpdateManyInput
}

input ProfileUpdatestoriesInput {
  set: [ID!]
}

input ProfileWhereInput {
  """Logical AND on all given filters."""
  AND: [ProfileWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProfileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProfileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  account_id: ID

  """All values that are not equal to given value."""
  account_id_not: ID

  """All values that are contained in given list."""
  account_id_in: [ID!]

  """All values that are not contained in given list."""
  account_id_not_in: [ID!]

  """All values less than the given value."""
  account_id_lt: ID

  """All values less than or equal the given value."""
  account_id_lte: ID

  """All values greater than the given value."""
  account_id_gt: ID

  """All values greater than or equal the given value."""
  account_id_gte: ID

  """All values containing the given string."""
  account_id_contains: ID

  """All values not containing the given string."""
  account_id_not_contains: ID

  """All values starting with the given string."""
  account_id_starts_with: ID

  """All values not starting with the given string."""
  account_id_not_starts_with: ID

  """All values ending with the given string."""
  account_id_ends_with: ID

  """All values not ending with the given string."""
  account_id_not_ends_with: ID
  userName: String

  """All values that are not equal to given value."""
  userName_not: String

  """All values that are contained in given list."""
  userName_in: [String!]

  """All values that are not contained in given list."""
  userName_not_in: [String!]

  """All values less than the given value."""
  userName_lt: String

  """All values less than or equal the given value."""
  userName_lte: String

  """All values greater than the given value."""
  userName_gt: String

  """All values greater than or equal the given value."""
  userName_gte: String

  """All values containing the given string."""
  userName_contains: String

  """All values not containing the given string."""
  userName_not_contains: String

  """All values starting with the given string."""
  userName_starts_with: String

  """All values not starting with the given string."""
  userName_not_starts_with: String

  """All values ending with the given string."""
  userName_ends_with: String

  """All values not ending with the given string."""
  userName_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  dateOfBirth: String

  """All values that are not equal to given value."""
  dateOfBirth_not: String

  """All values that are contained in given list."""
  dateOfBirth_in: [String!]

  """All values that are not contained in given list."""
  dateOfBirth_not_in: [String!]

  """All values less than the given value."""
  dateOfBirth_lt: String

  """All values less than or equal the given value."""
  dateOfBirth_lte: String

  """All values greater than the given value."""
  dateOfBirth_gt: String

  """All values greater than or equal the given value."""
  dateOfBirth_gte: String

  """All values containing the given string."""
  dateOfBirth_contains: String

  """All values not containing the given string."""
  dateOfBirth_not_contains: String

  """All values starting with the given string."""
  dateOfBirth_starts_with: String

  """All values not starting with the given string."""
  dateOfBirth_not_starts_with: String

  """All values ending with the given string."""
  dateOfBirth_ends_with: String

  """All values not ending with the given string."""
  dateOfBirth_not_ends_with: String
  storiesPublished: Int

  """All values that are not equal to given value."""
  storiesPublished_not: Int

  """All values that are contained in given list."""
  storiesPublished_in: [Int!]

  """All values that are not contained in given list."""
  storiesPublished_not_in: [Int!]

  """All values less than the given value."""
  storiesPublished_lt: Int

  """All values less than or equal the given value."""
  storiesPublished_lte: Int

  """All values greater than the given value."""
  storiesPublished_gt: Int

  """All values greater than or equal the given value."""
  storiesPublished_gte: Int
  storiesReviewed: Int

  """All values that are not equal to given value."""
  storiesReviewed_not: Int

  """All values that are contained in given list."""
  storiesReviewed_in: [Int!]

  """All values that are not contained in given list."""
  storiesReviewed_not_in: [Int!]

  """All values less than the given value."""
  storiesReviewed_lt: Int

  """All values less than or equal the given value."""
  storiesReviewed_lte: Int

  """All values greater than the given value."""
  storiesReviewed_gt: Int

  """All values greater than or equal the given value."""
  storiesReviewed_gte: Int
  flaggedStories: Int

  """All values that are not equal to given value."""
  flaggedStories_not: Int

  """All values that are contained in given list."""
  flaggedStories_in: [Int!]

  """All values that are not contained in given list."""
  flaggedStories_not_in: [Int!]

  """All values less than the given value."""
  flaggedStories_lt: Int

  """All values less than or equal the given value."""
  flaggedStories_lte: Int

  """All values greater than the given value."""
  flaggedStories_gt: Int

  """All values greater than or equal the given value."""
  flaggedStories_gte: Int
  occupation: String

  """All values that are not equal to given value."""
  occupation_not: String

  """All values that are contained in given list."""
  occupation_in: [String!]

  """All values that are not contained in given list."""
  occupation_not_in: [String!]

  """All values less than the given value."""
  occupation_lt: String

  """All values less than or equal the given value."""
  occupation_lte: String

  """All values greater than the given value."""
  occupation_gt: String

  """All values greater than or equal the given value."""
  occupation_gte: String

  """All values containing the given string."""
  occupation_contains: String

  """All values not containing the given string."""
  occupation_not_contains: String

  """All values starting with the given string."""
  occupation_starts_with: String

  """All values not starting with the given string."""
  occupation_not_starts_with: String

  """All values ending with the given string."""
  occupation_ends_with: String

  """All values not ending with the given string."""
  occupation_not_ends_with: String
  employer: OrganizationWhereInput
  accredidations_every: AccredidationWhereInput
  accredidations_some: AccredidationWhereInput
  accredidations_none: AccredidationWhereInput
  storiesLiked_every: LikesWhereInput
  storiesLiked_some: LikesWhereInput
  storiesLiked_none: LikesWhereInput
}

input ProfileWhereUniqueInput {
  id: ID
  account_id: ID
  userName: String
}

type Query {
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  accredidations(where: AccredidationWhereInput, orderBy: AccredidationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Accredidation]!
  likeses(where: LikesWhereInput, orderBy: LikesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Likes]!
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Organization]!
  profile(where: ProfileWhereUniqueInput!): Profile
  accredidation(where: AccredidationWhereUniqueInput!): Accredidation
  likes(where: LikesWhereUniqueInput!): Likes
  organization(where: OrganizationWhereUniqueInput!): Organization
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  accredidationsConnection(where: AccredidationWhereInput, orderBy: AccredidationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccredidationConnection!
  likesesConnection(where: LikesWhereInput, orderBy: LikesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LikesConnection!
  organizationsConnection(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrganizationConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  accredidation(where: AccredidationSubscriptionWhereInput): AccredidationSubscriptionPayload
  likes(where: LikesSubscriptionWhereInput): LikesSubscriptionPayload
  organization(where: OrganizationSubscriptionWhereInput): OrganizationSubscriptionPayload
}
